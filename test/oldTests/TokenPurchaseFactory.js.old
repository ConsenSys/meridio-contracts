const BigNumber = web3.BigNumber;
const expectThrow = require('./utils.js').expectThrow;

require('chai')
  .should();

const AssetToken = artifacts.require('AssetToken');
const TokenPurchase = artifacts.require('TokenPurchase');
const TokenPurchaseFactory = artifacts.require('TokenPurchaseFactory');
const WhitelistAbstraction = artifacts.require('Whitelist');

contract('TokenPurchaseFactory', accounts => {
  describe('given an token purchase factory contract', async function() {
    let factory = null;
    const owner = accounts[0];

    beforeEach(async function() {
      factory = await TokenPurchaseFactory.new({from: owner});
    });

    describe('given a tokens contract with an initial owner', async function() {
      let assetToken = null;
      let WL;
      const investorCap = 10;

      beforeEach(async function() {
        WL = await WhitelistAbstraction.new({from: accounts[0]});
        assetToken = await AssetToken.new(
          10000,
          'ABC Property',
          0,
          'ABC',
          WL.address,
          investorCap,
          {from: accounts[0]}
        );
      });

      describe('when a purchaser creates a token purchase', async function() {
        const purchaser = accounts[1];

        describe('when the given amount is greater than 0', async function() {
          const _amount = new BigNumber(10);

          it('creates a token purchase contract and transfers the ownership to the purchaser', async function() {
            const transaction = await factory.createTokenPurchase(assetToken.address, _amount, {from: purchaser, gasPrice: 0});
            const tokenPurchaseAddress = transaction.logs[0].args.tokenPurchaseAddress;
            const tokenPurchase = await TokenPurchase.at(tokenPurchaseAddress);

            const owner = await tokenPurchase.owner();
            const amount = await tokenPurchase.amount();
            const closed = await tokenPurchase.closed();
            const tokenAddress = await tokenPurchase.token();
            const priceInWei = await tokenPurchase.priceInWei();

            closed.should.be.true;
            owner.should.be.equal(purchaser);
            tokenAddress.should.be.equal(assetToken.address);
            transaction.logs[0].event.should.be.equal('TokenPurchaseCreated');
          });
        });

        describe('when the given amount is not greater than 0', async function() {
          const _amount = new BigNumber(0);

          it('does not create a raffle contract', async function() {
            return expectThrow(
              factory.createTokenPurchase(assetToken.address, _amount, {from: purchaser, gasPrice: 0})
            );
          });
        });
      });
    });
  });
});
